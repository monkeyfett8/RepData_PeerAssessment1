datatest <- read.table(datatest.csv)
datatest <- read.table(/datatest.csv)
datatest <- read.table(../datatest.csv)
datatest <- read.table(Users/monkeyfett8/Documents/datatest.csv)
datatest <- read.table(/Users/monkeyfett8/Documents/datatest.csv)
datatest <- read.table(~/datatest.csv)
datatest <- read.table(~\datatest.csv)
data <- read.csv(~/datatest.csv, header=True)
data <- read.csv(~\datatest.csv, header=True)
data <- read.csv("datatest.csv", header=True)
data <- read.csv("/Users/monkeyfett8/Documents/datatest.csv", header=True)
data <- read.csv("/Users/monkeyfett8/Documents/datatest.csv", header=true)
data <- read.csv(file = "/Users/monkeyfett8/Documents/datatest.csv", header=true)
data <- read.csv(file = "/Users/monkeyfett8/Documents/datatest.csv")
data
names(data)
help(plot)
plot(x,y)
plot(data.x,data.y)
plot(data)
plot(rank, data)
plot(data)
plot(x~ydata)
plot(x~y,data)
data <- edit(data)
library(ggplot2)
plot(x~y,data,col=z)
X=data(x)
data
data <- read.csv(file = "/Users/monkeyfett8/Documents/datatest.csv",header=true)
data <- read.csv(file = "/Users/monkeyfett8/Documents/datatest.csv",header=TRUE)
data
data2 <- read.csv(file = "/Users/monkeyfett8/Documents/datatest.csv",header=TRUE)
data2
plot(data$x,data$y)
plot(data$x,data$y,pch=".")
plot(data$x,data$y,pch="h")
plot(data$x,data$y,pch="o",col=heat.color(30)[data$rank])
plot(data$x,data$y,pch="o",col=data$rank)
install.packages("ggplot2")
p <- ggplot(data)
p <- ggplot2(data)
library(ggplot2)
p <- ggplot(data, aes(data$x,data$y,colour=data$rank))
p+ geom_point()
data2=edit(data)
p <- ggplot(data2, aes(data2$x,data2$y,colour=data2$rank))
p+ geom_point()
?rnorm
readlines("http://www.coursera.com")
search()
install.packages("KernSmooth")
library(KernSmooth)
x <- c("a","b","c","d")
for(potato in x){print(potato)}
x <- 1:20
y <- rand(20)
y <- norm(20)
y <- norm(1:20)
y <- 2*(1:20)
y
plot(x,y)
y <- lapply(x,x^2)
y <- lapply(x,x**2)
y <- lapply(x,square)
y <- rnorm(20)
plot(x,y)
x <- 1:4
y <- lapply(x,rnorm)
y
z <- lapply(y,mean)
z
x <- 1:20
y <- lapply(x, function(te) te**2)
plot(x,y)
y <- x**2
plot(x,y)
cube <- function(x,n){}
cube <- function(x,n){â€¨ x^3â€¨}
ls()
rm(cube)
ls()
pwd
printwd()
source("processBuild.R")
head(dat)
summarize(dat,group_by(interval),mean(steps))
library(dyplr)
install.packages("dplyr")
summarize(dat,group_by(interval),mean(steps))
library(dyplr)
library(dplyr)
summarize(dat,group_by(interval),mean(steps))
aggregate(dat,by=list(interval),mean,na.rm=T)
aggregate(dat,by=list(interval),mean(steps),na.rm=T)
aggregate(dat,by=list(interval),mean(dat$steps),na.rm=T)
aggregate(dat,by=list(interval),fun=mean(dat$steps),na.rm=T)
aggregate(dat,by=list(interval),FUN=mean(dat$steps),na.rm=T)
aggregate(dat,by=list(interval),FUN=mean(),na.rm=T)
aggregate(dat,by=list(interval),FUN=mean,na.rm=T)
aggregate(dat$steps,by=list(interval),FUN=mean,na.rm=T)
aggregate(dat$steps,by=list(dat$interval),FUN=mean,na.rm=T)
install.packages("plyr")
library(plyr)
library(dplyr)
ddply(dat,~group,summarize,mean=mean(steps))
ddply(dat,~interval,summarize,mean=mean(steps))
ddply(dat,~interval,summarize,mean=mean(steps),na.rm=T)
ddply(dat,~interval,summarize,mean=mean(steps,na.rm=T))
ddply(dat,~interval,summarize,meanSteps=mean(steps,na.rm=T))
source("processBuild.R")
source("processBuild.R")
source("processBuild.R")
source("processBuild.R")
library(lubridate)#
library(ggplot2)#
library(scales)#
library(plyr)
head(byInterval)
mutate(byInterval,time=00:00+interval)
mutate(byInterval,time=hms(00:00:00+interval))
mutate(byInterval,time=hms(00:00:00)+minute(interval))
hms(00:00:00)
hms(04:00:00)
min(dat$day)
min(dat$dates)
min(dat$date)
ymd_hms(min(dat$date))
ymd_hms(min(dat$date)))
ymd_hms(min(dat$date))
min(dat$date)
hour(min(dat$date))
minute(min(dat$date))
second(min(dat$date))
start <- min(dat$date)
start
start+minute(5)
start+minute("5")
start+minutes("5")
head(byInterval)
mutate(byInterval,time=minutes(interval))
mutate(byInterval,time=hms(minutes(interval)))
minutes(2345)
mutate(byInterval,time=min(dat$date)+minutes(interval))
hm(byInterval$interval)
hm(as.char(byInterval$interval))
hm(as.character(byInterval$interval))
as.character(byInterval)
formatC(byInterval$interval,width=4,flag="0")
hm(formatC(byInterval$interval,width=4,flag="0"))
hms(formatC(byInterval$interval,width=4,flag="0"))
hms(formatC(byInterval$interval*100,width=6,flag="0"))
formatC(byInterval$interval*100,width=6,flag="0")
hms(formatC(byInterval$interval*100,width=6,flag="0"))
hm(formatC(byInterval$interval,width=6,flag="0"))
formatC(byInterval$interval,width=6,flag="0")
formatC(byInterval$interval,width=4,flag="0")
strptime(formatC(byInterval$interval,width=4,flag="0"),format=%h%m)
strptime(formatC(byInterval$interval,width=4,flag="0"),format=%h:%m)
strptime(formatC(byInterval$interval,width=4,flag="0"),format="%h%m")
formatC(byInterval$interval,width=4,flag="0")
hm(formatC(byInterval$interval,width=4,flag="0"))
hm(formatC(byInterval$interval,width=4,flag="0"),sep"")
hm(formatC(byInterval$interval,width=4,flag="0"),sep="")
library(tidyr)
install.packages("tidyr")
library(tidyr)
separate(byInterval,interval,into=c("hr","min"),sep=2)
separate(formatC(byInterval$interval,width=4,flag="0"),interval,into=c("hr","min"),sep=2)
head(byInterval)
byInterval$interval <- formatC(byInterval$interval,width=4,flag="0")
head(byInterval)
separate(byInterval,interval,into=c("hr","min"),sep=2)
source("processBuild.R")
source("processBuild.R")
head(byInterval)
mutate(byInterval,time=min(dat$date)+minutes(min)+hour(hr))
min(byInterval$min)
minute(byInterval$min)
minutes(byInterval$min)
mutate(byInterval,time=min(dat$date)+minutes(min)+hours(hr))
mutate(byInterval,time=minutes(min)+hours(hr))
sapply(byInterval,class)
byInterval <- mutate(byInterval,time=minutes(min)+hours(hr))
sapply(byInterval,class)
mutate(byInterval,time=min(dat$date)+minutes(min)+hours(hr))
sapply(byInterval,class)
byInterval <- mutate(byInterval,time=min(dat$date)+minutes(min)+hours(hr))
sapply(byInterval,class)
source("processBuild.R")
source("processBuild.R")
byInterval
byInterval <- mutate(byInterval, hhmm <- formatC(byInterval$interval,width=4,flag="0"))
head(byInterval)
byInterval <- mutate(byInterval, hhmm = formatC(byInterval$interval,width=4,flag="0"))
head(byInterval)
source("processBuild.R")
head(byInterval)
source("processBuild.R")
source("processBuild.R")
head(byInterval)
ggplot(byInterval, aes(x=time,y=meanSteps)) +#
	geom_line()
ggplot(byInterval, aes(x=time,y=meanSteps)) +#
	geom_line() +
scale_x_datetime(labels = date_format("%h %m"), breaks = date_breaks("hour"))
ggplot(byInterval, aes(x=time,y=meanSteps)) +#
	geom_line() +#
	scale_x_datetime(labels = date_format("%H:%M"), breaks = date_breaks("hour"))
ggplot(byInterval, aes(x=time,y=meanSteps)) +#
	geom_line() +#
	scale_x_datetime(labels = date_format("%H:%M"), breaks = date_breaks("2hour"))
ggplot(byInterval, aes(x=time,y=meanSteps)) +#
	geom_line() +#
	scale_x_datetime(labels = date_format("%H:%M"), breaks = date_breaks("2 hour"))
source("processBuild.R")
